import requests
import google.generativeai as genai
import gradio as gr

# Configure Gemini API (Use your actual API key)
genai.configure(api_key='AIzaSyD5yLv8zkGNC7YbxxODLqlMJJKTv8VWdQw')

# Function to get data from OpenFoodFacts API
def get_data(product_name):
    url = "https://world.openfoodfacts.org/cgi/search.pl"
    params = {
            'search_terms': product_name,
            'search_simple': 1,
            'json': 1,
        }
    response = requests.get(url, params=params)
    data = response.json()
    if 'products' not in data or len(data['products']) == 0:
        return []  # Return empty if no products found

    # Filter products with names and return top 5
    data['products'] = [p for p in data['products'] if 'product_name' in p]
    return data['products'][:5]

# Function to generate product analysis using Gemini
def generate_summary(product, tone):
    name = product.get('product_name', 'Not mentioned')
    brand = product.get('brands', 'Not mentioned')
    nutriscore_grade = product.get('nutriscore_grade', 'Not mentioned')
    eco_score = product.get('ecoscore_grade', 'Not mentioned')
    packaging = product.get('packaging', 'Not mentioned')
    ingredients = product.get('ingredients_text', 'Not mentioned')
    nutrients = product.get('nutriments', 'Not mentioned')
    nova = product.get('nova_groups_tags', 'Not mentioned')

    # Generate prompt based on tone
    prompt = f"""
    You are an AI assistant analyzing consumer products. Please provide the analysis in plain text without any special formatting, headers, or markdown and bolding the headlines etc please dont give like this **Health impact:** if you have this then make it Health impact:. Here are the details:
    - Name: {name}
    - Brand: {brand}
    - EcoScore: {eco_score}
    - NutriScore: {nutriscore_grade}
    - NovaScore: {nova}
    - Ingredients: {ingredients}
    - Nutrients: {nutrients}
    - Packaging: {packaging}

    Please provide a {tone} analysis including:
    1. Positive aspects of the product.
    2. Negative aspects of the product.
    3. Health impact.
    4. Environmental impact.
    """
    
    model = genai.GenerativeModel(model_name="gemini-1.5-flash")
    response = model.generate_content(prompt)
    return response.text

# Gradio interface for getting product data and summary
def search_products(product_name, tone):
    products = get_data(product_name)
    if not products:
        return "No products found for the given name.", None

    selected_product = products[0]  # Take the first product found
    summary = generate_summary(selected_product, tone)
    return f"Product Name:  {selected_product['product_name']} (Brand: {selected_product['brands']})", summary

# Gradio interface
# def build_interface():
#     product_input = gr.Textbox(label="Product Name", placeholder="Enter the product name...")
#     tone_input = gr.Radio(choices=["simple", "deeper"], value="simple", label="Summary Tone")

    # interface = gr.Interface(
    #     fn=search_products,
    #     inputs=[product_input, tone_input],
    #     outputs=["text", "text"],
    #     title="ConsumeNice",
    #     description="Get product details and Be Healthier."
    # )
def build_interface():
        product_input = gr.Textbox(label="Product Name", placeholder="Enter the product name...")
        tone_input = gr.Radio(choices=["simple", "deeper"], value="simple", label="Summary Tone")

        interface = gr.Interface(
            fn=search_products,
            inputs=[product_input, tone_input],
            outputs=[
                gr.Textbox(label="Product Information"),  # Label for the first output
                gr.Textbox(label="Detailed Summary")      # Label for the second output
            ],
            title="ConsumeNice",
            description="Get product details and summaries using OpenFoodFacts and Gemini AI."
        )

        interface.launch()

# Run the Gradio interface
if __name__ == "__main__":
    build_interface()