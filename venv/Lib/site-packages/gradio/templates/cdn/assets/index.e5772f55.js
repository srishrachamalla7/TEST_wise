import{S as p,i as h,s as b,d as u,v as g,Z as w,B as v,C as T,D as f,E as m,F as $,K as y,_ as j,$ as E,a0 as S}from"./index.b0283b9c.js";import{T as _}from"./Tabs.d18fc9cb.js";function d(s){let e;const i=s[1].default,o=w(i,s,s[3],null),c={c:function(){o&&o.c()},m:function(n,r){o&&o.m(n,r),e=!0},p:function(n,r){o&&o.p&&(!e||r&8)&&j(o,i,n,n[3],e?S(i,n[3],r,null):E(n[3]),null)},i:function(n){e||(f(o,n),e=!0)},o:function(n){m(o,n),e=!1},d:function(n){o&&o.d(n)}};return u("SvelteRegisterBlock",{block:c,id:d.name,type:"slot",source:"(5:0) <Tabs on:change>",ctx:s}),c}function l(s){let e,i;e=new _({props:{$$slots:{default:[d]},$$scope:{ctx:s}},$$inline:!0}),e.$on("change",s[2]);const o={c:function(){v(e.$$.fragment)},l:function(t){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(t,n){T(e,t,n),i=!0},p:function(t,[n]){const r={};n&8&&(r.$$scope={dirty:n,ctx:t}),e.$set(r)},i:function(t){i||(f(e.$$.fragment,t),i=!0)},o:function(t){m(e.$$.fragment,t),i=!1},d:function(t){$(e,t)}};return u("SvelteRegisterBlock",{block:o,id:l.name,type:"component",source:"",ctx:s}),o}function k(s,e,i){let{$$slots:o={},$$scope:c}=e;g("Tabs",o,["default"]);let{elem_id:t=""}=e;const n=["elem_id"];Object.keys(e).forEach(a=>{!~n.indexOf(a)&&a.slice(0,2)!=="$$"&&a!=="slot"&&console.warn(`<Tabs> was created with unknown prop '${a}'`)});function r(a){y.call(this,s,a)}return s.$$set=a=>{"elem_id"in a&&i(0,t=a.elem_id),"$$scope"in a&&i(3,c=a.$$scope)},s.$capture_state=()=>({Tabs:_,elem_id:t}),s.$inject_state=a=>{"elem_id"in a&&i(0,t=a.elem_id)},e&&"$$inject"in e&&s.$inject_state(e.$$inject),[t,o,r,c]}class C extends p{constructor(e){super(e),h(this,e,k,l,b,{elem_id:0}),u("SvelteRegisterComponent",{component:this,tagName:"Tabs_1",options:e,id:l.name})}get elem_id(){throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var D=C;const O=["static"];export{D as Component,O as modes};
