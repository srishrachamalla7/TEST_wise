import{S as v,i as p,s as g,d,v as b,y as m,h as M,b as h,c as T,e as y,n as _,g as E,B as j,C as P,D as S,E as k,F as C,K as O}from"./index.66004ba3.js";const R="mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/html/src/HTML.svelte";function w(n){let e;const o={c:function(){e=M("div"),h(e,"class","output-html"),h(e,"id",n[0]),T(e,R,7,0,192)},l:function(c){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(c,t){y(c,e,t),e.innerHTML=n[1]},p:function(c,[t]){t&2&&(e.innerHTML=c[1]),t&1&&h(e,"id",c[0])},i:_,o:_,d:function(c){c&&E(e)}};return d("SvelteRegisterBlock",{block:o,id:w.name,type:"component",source:"",ctx:n}),o}function B(n,e,o){let{$$slots:r={},$$scope:c}=e;b("HTML",r,[]);let{elem_id:t=""}=e,{value:a}=e;const l=m(),u=["elem_id","value"];return Object.keys(e).forEach(i=>{!~u.indexOf(i)&&i.slice(0,2)!=="$$"&&i!=="slot"&&console.warn(`<HTML> was created with unknown prop '${i}'`)}),n.$$set=i=>{"elem_id"in i&&o(0,t=i.elem_id),"value"in i&&o(1,a=i.value)},n.$capture_state=()=>({createEventDispatcher:m,elem_id:t,value:a,dispatch:l}),n.$inject_state=i=>{"elem_id"in i&&o(0,t=i.elem_id),"value"in i&&o(1,a=i.value)},e&&"$$inject"in e&&n.$inject_state(e.$$inject),n.$$.update=()=>{n.$$.dirty&2&&l("change")},[t,a]}class H extends v{constructor(e){super(e),p(this,e,B,w,g,{elem_id:0,value:1}),d("SvelteRegisterComponent",{component:this,tagName:"HTML",options:e,id:w.name});const{ctx:o}=this.$$,r=e.props||{};o[1]===void 0&&!("value"in r)&&console.warn("<HTML> was created without expected prop 'value'")}get elem_id(){throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}function f(n){let e,o;e=new H({props:{value:n[1],elem_id:n[0]},$$inline:!0}),e.$on("change",n[3]);const r={c:function(){j(e.$$.fragment)},l:function(t){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(t,a){P(e,t,a),o=!0},p:function(t,[a]){const l={};a&2&&(l.value=t[1]),a&1&&(l.elem_id=t[0]),e.$set(l)},i:function(t){o||(S(e.$$.fragment,t),o=!0)},o:function(t){k(e.$$.fragment,t),o=!1},d:function(t){C(e,t)}};return d("SvelteRegisterBlock",{block:r,id:f.name,type:"component",source:"",ctx:n}),r}function D(n,e,o){let{$$slots:r={},$$scope:c}=e;b("HTML",r,[]);let{label:t}=e,{elem_id:a=""}=e,{value:l=""}=e;const u=m(),i=["label","elem_id","value"];Object.keys(e).forEach(s=>{!~i.indexOf(s)&&s.slice(0,2)!=="$$"&&s!=="slot"&&console.warn(`<HTML> was created with unknown prop '${s}'`)});function L(s){O.call(this,n,s)}return n.$$set=s=>{"label"in s&&o(2,t=s.label),"elem_id"in s&&o(0,a=s.elem_id),"value"in s&&o(1,l=s.value)},n.$capture_state=()=>({createEventDispatcher:m,HTML:H,label:t,elem_id:a,value:l,dispatch:u}),n.$inject_state=s=>{"label"in s&&o(2,t=s.label),"elem_id"in s&&o(0,a=s.elem_id),"value"in s&&o(1,l=s.value)},e&&"$$inject"in e&&n.$inject_state(e.$$inject),n.$$.update=()=>{n.$$.dirty&4&&u("change")},[a,l,t,L]}class x extends v{constructor(e){super(e),p(this,e,D,f,g,{label:2,elem_id:0,value:1}),d("SvelteRegisterComponent",{component:this,tagName:"HTML_1",options:e,id:f.name});const{ctx:o}=this.$$,r=e.props||{};o[2]===void 0&&!("label"in r)&&console.warn("<HTML> was created without expected prop 'label'")}get label(){throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get elem_id(){throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<HTML>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<HTML>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var q=x;const F=["static"];export{q as Component,F as modes};
