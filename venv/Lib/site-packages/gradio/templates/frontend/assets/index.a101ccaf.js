import{S as _,i as p,s as g,d as m,v as b,y as u,h as y,b as w,a2 as E,c as j,e as P,n as v,g as S,B as x,C,D as O,E as R,F as B,K as D}from"./index.66004ba3.js";const H="mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/markdown/src/Markdown.svelte";function h(n){let e;const o={c:function(){e=y("div"),w(e,"id",n[0]),w(e,"class","output-markdown gr-prose"),E(e,"max-width","100%"),j(e,H,8,0,219)},l:function(r){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(r,t){P(r,e,t),e.innerHTML=n[1]},p:function(r,[t]){t&2&&(e.innerHTML=r[1]),t&1&&w(e,"id",r[0])},i:v,o:v,d:function(r){r&&S(e)}};return m("SvelteRegisterBlock",{block:o,id:h.name,type:"component",source:"",ctx:n}),o}function L(n,e,o){let{$$slots:c={},$$scope:r}=e;b("Markdown",c,[]);let{elem_id:t=""}=e,{value:i}=e;const l=u(),d=["elem_id","value"];return Object.keys(e).forEach(a=>{!~d.indexOf(a)&&a.slice(0,2)!=="$$"&&a!=="slot"&&console.warn(`<Markdown> was created with unknown prop '${a}'`)}),n.$$set=a=>{"elem_id"in a&&o(0,t=a.elem_id),"value"in a&&o(1,i=a.value)},n.$capture_state=()=>({createEventDispatcher:u,elem_id:t,value:i,dispatch:l}),n.$inject_state=a=>{"elem_id"in a&&o(0,t=a.elem_id),"value"in a&&o(1,i=a.value)},e&&"$$inject"in e&&n.$inject_state(e.$$inject),n.$$.update=()=>{n.$$.dirty&2&&l("change")},[t,i]}class k extends _{constructor(e){super(e),p(this,e,L,h,g,{elem_id:0,value:1}),m("SvelteRegisterComponent",{component:this,tagName:"Markdown",options:e,id:h.name});const{ctx:o}=this.$$,c=e.props||{};o[1]===void 0&&!("value"in c)&&console.warn("<Markdown> was created without expected prop 'value'")}get elem_id(){throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}function f(n){let e,o;e=new k({props:{value:n[0]},$$inline:!0}),e.$on("change",n[3]);const c={c:function(){x(e.$$.fragment)},l:function(t){throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option")},m:function(t,i){C(e,t,i),o=!0},p:function(t,[i]){const l={};i&1&&(l.value=t[0]),e.$set(l)},i:function(t){o||(O(e.$$.fragment,t),o=!0)},o:function(t){R(e.$$.fragment,t),o=!1},d:function(t){B(e,t)}};return m("SvelteRegisterBlock",{block:c,id:f.name,type:"component",source:"",ctx:n}),c}function N(n,e,o){let{$$slots:c={},$$scope:r}=e;b("Markdown",c,[]);let{label:t}=e,{elem_id:i=""}=e,{value:l=""}=e;const d=u(),a=["label","elem_id","value"];Object.keys(e).forEach(s=>{!~a.indexOf(s)&&s.slice(0,2)!=="$$"&&s!=="slot"&&console.warn(`<Markdown> was created with unknown prop '${s}'`)});function M(s){D.call(this,n,s)}return n.$$set=s=>{"label"in s&&o(1,t=s.label),"elem_id"in s&&o(2,i=s.elem_id),"value"in s&&o(0,l=s.value)},n.$capture_state=()=>({createEventDispatcher:u,Markdown:k,label:t,elem_id:i,value:l,dispatch:d}),n.$inject_state=s=>{"label"in s&&o(1,t=s.label),"elem_id"in s&&o(2,i=s.elem_id),"value"in s&&o(0,l=s.value)},e&&"$$inject"in e&&n.$inject_state(e.$$inject),n.$$.update=()=>{n.$$.dirty&2&&d("change")},[l,t,i,M]}class T extends _{constructor(e){super(e),p(this,e,N,f,g,{label:1,elem_id:2,value:0}),m("SvelteRegisterComponent",{component:this,tagName:"Markdown_1",options:e,id:f.name});const{ctx:o}=this.$$,c=e.props||{};o[1]===void 0&&!("label"in c)&&console.warn("<Markdown> was created without expected prop 'label'")}get label(){throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set label(e){throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get elem_id(){throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set elem_id(e){throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}get value(){throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}set value(e){throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'")}}var F=T;const K=["static"];export{F as Component,K as modes};
